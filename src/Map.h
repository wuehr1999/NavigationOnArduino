#ifndef MAP_H
#define MAP_H
#include <Arduino.h>
#include <ArduinoQueue.h>
#include <NavPoint.h>

#define MAP_WAYPOINTS_MAX 400
#define MAP_POINTSINWAY_MAX 400

class Map {

public:
  /*!
   * @brief Initializes object for storing data from osm file format
   */
  Map();

  /*!
   * @brief Sets up map
   * @param log, enables log via serial console
   */
  void begin(bool log);

  /*!
   * @brief Sets up map with log enabled by default
   */
  void begin();

  /*!
   * @brief Method for parsing osm data from file
   * A osm string to be included in the code can be generated with the
   * osmfileToString tool
   */
  void parse(const char *osmString);

  /*!
   * @brief Returns summary log from parsing
   */
  String getParseLog();

  /*!
   * @brief Returns number of available waypoints
   * @retval number of all known waypoints
   */
  uint16_t getNumberOfWaypoints();

  /*!
   * @brief Returns waypoint
   * @param waypointIndex, Index of waypoint in list of all waypoints
   * @retval waypoint as NavPoint
   */
  NavPoint getWaypoint(uint16_t waypointIndex);

  /*!
   * @brief Adds navpoint as waypoint
   * @param id, unique point id
   * @param point, NavPoint
   * @retval success
   */
  bool addWaypoint(uint16_t id, NavPoint point);

  /*!
   * @brief Adds navpoint as waypoint, the id is autogenerated
   * @retval success
   */
  bool addWaypoint(NavPoint point);

  /*!
   * @brief Deletes all waypoints from map
   */
  void flushWaypoints();

  /*!
   * @brief Sets up new way
   * @retval success
   */
  bool addWay();

  /*!
   * @brief Adds waypoint to way
   * @param id, id of waypoint
   * @retval success
   */
  bool addPointToWay(uint16_t id);

  /*!
   * @brief Deletes all ways
   */
  void flushWays();

  /*!
   * @brief Returns number of available ways
   * @brief number of all known ways
   */
  uint16_t getNumberOfWays();

  /*!
   * @brief Returns number of waypoints in way
   * @param index, index of way in lists
   * @retval number of waypoints in a way
   */
  uint16_t getNumberOfPointsInWay(uint16_t index);

  /*!
   * @brief Returns number of available waypoints
   * @param wayIndex, index of way in list of ways
   * @param waypointIndex, index of waypoint in a way
   */
  NavPoint getWaypointFromWay(uint16_t wayIndex, uint16_t waypointIndex);

  /*!
   * @brief Snaps point on road (finds closest known waypoint)
   * @param point, point to be snapped
   * @retval index of waypoint
   */
  uint16_t getClosestWaypoint(NavPoint point);

  /*!
   * @brief Returns points adjacent to specific waypoint
   * @param pointIndex, index of waypoint
   * @retval queue with indexes of adjacent points
   */
  ArduinoQueue<uint16_t> getAdjacents(uint16_t pointIndex);

  /*!
   * @brief Plans shortest route between two points based on Dijkstra's
   * algorithm
   * @param start, start position (doesn't need to be in waypoints list)
   * @param destination, destination position (doesn't need to be in waypoints
   * list)
   * @retval queue of waypoint indexes in correct order
   */
  ArduinoQueue<uint16_t> planRoute(NavPoint start, NavPoint destination);

  /*!
   * @brief Returns summary log from route planning
   * @retval log string
   */
  String getRouteLog();

  /*!
   * @brief Returns coordinates of upper left corner of the map
   * @retval NavPoint
   */
  NavPoint getUpperLeftCorner();

  /*!
   * @brief Returns coordinates of lower right corner of the map
   * @retval NavPoint
   */
  NavPoint getLowerRightCorner();

private:
  bool log;
  int errors, warnings;
  String parseLog;
  String routeLog;

  NavPoint *waypoints;
  uint16_t *waypointIDs;
  uint16_t numberOfWaypoints;

  uint16_t numberOfWays;
  uint16_t *wayLengths;
  uint16_t *wayArray;
  uint16_t pointsInWay;

  bool setWayArray(uint16_t wayNr, uint16_t index, uint16_t pointId);
  uint16_t getWayArray(uint16_t wayNr, uint16_t index);
};

#endif
